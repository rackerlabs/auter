# This is a script that is intended to only be called by /usr/bin/auter and
# contains linux package manager specific code for auter.


# This is the yum/dnf version of this script intended for redhat/fedora/CentOS

# Exit if this script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  echo "ERROR: This script is used by auter and should not be executed directly. Exiting"
fi

function check_package_manager_lock() {
  # Set default values if the variables are undefined
  [[ "${PACKAGEMANAGERLOCKRETRIES}" ]] || PACKAGEMANAGERLOCKRETRIES=5
  [[ "${PACKAGEMANAGERLOCKRETRIES}" -lt 1 ]] && PACKAGEMANAGERLOCKRETRIES=5

  [[ "${PACKAGEMANAGERLOCKWAITTIME}" ]] || PACKAGEMANAGERLOCKWAITTIME=60
  [[ "${PACKAGEMANAGERLOCKWAITTIME}" -lt 1 ]] && PACKAGEMANAGERLOCKWAITTIME=60

  if [[ -f /var/run/yum.pid ]]; then
    for LOCKCHECKATTEMPT in $(seq 1 $((PACKAGEMANAGERLOCKRETRIES + 1))); do
      # If this has reached the retry limit configured then abort
      if [[ ${LOCKCHECKATTEMPT} -eq $((PACKAGEMANAGERLOCKRETRIES + 1)) ]]; then
        logit "ERROR: Final attempt to wait for yum to release lock file failed. Aborting auter run"
        quit 3
      fi

      logit "INFO: /var/run/yum.pid exists. Waiting ${PACKAGEMANAGERLOCKWAITTIME} seconds for yum lock to be released: Attempt ${LOCKCHECKATTEMPT} of ${PACKAGEMANAGERLOCKRETRIES}"
      sleep ${PACKAGEMANAGERLOCKWAITTIME}
      [[ ! -f /var/run/yum.pid ]] && logit "INFO: yum lock has been released" && break
    done
  fi
}

function prepare_updates() {
  # Check for yum.lock file
  check_package_manager_lock

  # Run any pre-prep scripts
  for SCRIPT in "${PREPREPSCRIPTDIR}"/*; do
    run_script "${SCRIPT}" "Pre-Prep"
  done

  if [[ "${PREDOWNLOADUPDATES}" == "yes" ]]; then
    if [[ $("${PACKAGE_MANAGER}" --help | grep -c downloadonly) -gt 0 ]]; then
      # Remove the old RPMS from the auter cache
      [[ "${ONLYINSTALLFROMPREP}" == "yes" ]] && rm -f "${DOWNLOADDIR}"/"${CONFIGSET}"/*.rpm

      local RC=$("${PACKAGE_MANAGER}" check-update "${PACKAGEMANAGEROPTIONS[@]}" &>/dev/null; echo $?)

      # If check-update has an exit code of 100, updates are available.
      if [[ "${RC}" -eq 100 ]]; then
        # Run any pre-prep scripts
        sleep $((RANDOM % MAXDELAY))
        if [[ "${ONLYINSTALLFROMPREP}" == "yes" ]]; then
          DOWNLOADOPTION=("--downloaddir=${DOWNLOADDIR}/${CONFIGSET}")
          
          # DNF doesn't support downloaddir, so instead we download to the default
          # location and copy out the way
          if [[ "${PACKAGE_MANAGER}" == "dnf" ]]; then
            find /var/cache/dnf -name "*.rpm" -exec rm -f {} \;
            DOWNLOADOPTION=()
          fi
          DOWNLOADLOGMSG=" to ${DOWNLOADDIR}/${CONFIGSET}"
        fi

        PREPOUTPUT=$("${PACKAGE_MANAGER}" "${PACKAGEMANAGEROPTIONS[@]}" "${DOWNLOADOPTION[@]}" update --downloadonly -y 2>&1)
        if [[ $? -eq 0 ]]; then
          if [[ "${ONLYINSTALLFROMPREP}" == "yes" && "${PACKAGE_MANAGER}" == "dnf" ]]; then
            find /var/cache/dnf -name "*.rpm" -exec mv {} "${DOWNLOADDIR}/${CONFIGSET}" \;
          fi
          logit "INFO: Updates downloaded${DOWNLOADLOGMSG}"
        else
          logit "ERROR: Updates could not be pre-downloaded${DOWNLOADLOGMSG}. See the ${DATADIR}/last-prep-output-${CONFIGSET} file for details."
        fi

      elif [[ "${RC}" -eq 1 ]]; then
        logit "ERROR: Exit status ${RC} returned by \`${PACKAGE_MANAGER} ${PACKAGEMANAGEROPTIONS[*]} ${DOWNLOADOPTION[*]} update --downloadonly -y\`. Exiting."
      else
        logit "INFO: No updates are available to be downloaded."
      fi
    else
      logit "WARNING: downloadonly option is not available"
    fi
  else
    PREPOUTPUT=$("${PACKAGE_MANAGER}" "${PACKAGEMANAGEROPTIONS[@]}" check-update 2>&1)
  fi
  rotate_file "${DATADIR}/last-prep-output-${CONFIGSET}"
  [[ "${PREPOUTPUT}" ]] && echo "${PREPOUTPUT}" > "${DATADIR}/last-prep-output-${CONFIGSET}"

  # Run any post-prep scripts
  for SCRIPT in "${POSTPREPSCRIPTDIR}"/*; do
    run_script "${SCRIPT}" "Post-Prep"
  done
}

function apply_updates() {
  # Set the list of rpms to be installed
  if [[ "${ONLYINSTALLFROMPREP}" == "yes" ]]; then
    # Default RC to 0 which means no updates are available
    local RC=0
    # Check if there are updates staged for this configset
    if [[ $(find "${DOWNLOADDIR}/${CONFIGSET}" -name "*.rpm" | wc -l) -gt 0 ]]; then
      local RPMS=()
      # Check if the updates staged are still required
      for PACKAGE in ${DOWNLOADDIR}/${CONFIGSET}/*.rpm; do
        # Check if the local rpm is an update to the installed package and if it is then add the file to RPMS
        # list. We are using rpm directly for this check because "yum check-update" does not support local rpm
        # files. This also avoids connecting to the repos. And finally this avoids an issue when updating the
        # kernel to the same version.
        rpm -U --nodeps --test "${PACKAGE}" &>/dev/null && RPMS+=("$PACKAGE")
      done

      # We are manually setting the RC to 100 if there are updates to be applied. This is the return code that
      # yum check-update would return if there were outstanding updates
      [[ "${RPMS[*]}" ]] && RC=100
    fi
    # When passing RPM files to dnf/yum, the update verb won't install any that aren't already
    # installed (i.e. dependencies of other packages). Instead we need to use install.
    UPDATEACTION="install"
  else
    local RC=$("${PACKAGE_MANAGER}" check-update "${PACKAGEMANAGEROPTIONS[@]}" &>/dev/null; echo $?)
    UPDATEACTION="update"
  fi

  # If check-update has an exit code of 100, updates are available.
  if [[ "${RC}" -eq 100 ]]; then
    # Check for yum.lock file
    check_package_manager_lock

    for SCRIPT in "${PREAPPLYSCRIPTDIR}"/*; do
      run_script "${SCRIPT}" "Pre-Apply"
    done

    sleep $((RANDOM % MAXDELAY))
    logit "INFO: Applying updates"
    local HISTORY_BEFORE=$(${PACKAGE_MANAGER} history list)

    # We don't want to allow the user to interrupt a yum/dnf transaction or Bad Things Happen.
    trap '' SIGINT SIGTERM
    rotate_file "${DATADIR}/last-apply-output-${CONFIGSET}"
    "${PACKAGE_MANAGER}" "${UPDATEACTION}" -y "${PACKAGEMANAGEROPTIONS[@]}" "${RPMS[@]}" &>"${DATADIR}/last-apply-output-${CONFIGSET}"
    default_signal_handling

    local HISTORY_AFTER=$(${PACKAGE_MANAGER} history list)

    for SCRIPT in "${POSTAPPLYSCRIPTDIR}"/*; do
      run_script "${SCRIPT}" "Post-Apply"
    done

    if [[ "${HISTORY_BEFORE}" == "${HISTORY_AFTER}" ]]; then
      logit "ERROR: Updates failed. See the ${DATADIR}/last-apply-output-${CONFIGSET}-$(date +%F) file for details. Exiting."
      cp "${DATADIR}/last-apply-output-${CONFIGSET}" "${DATADIR}/last-apply-output-${CONFIGSET}-$(date +%F)"
      quit 3
    fi

    local TRANSACTIONID=$(${PACKAGE_MANAGER} history info 2>&1 | grep "Transaction ID")
    logit "INFO: Updates complete (${PACKAGE_MANAGER} ${TRANSACTIONID}). You may need to reboot for some updates to take effect"
    log_last_run

    [[ "${AUTOREBOOT}" == "yes" ]] && declare -x REBOOTCALL=1

    # Remove the old RPMS from the auter cache
    [[ "${ONLYINSTALLFROMPREP}" == "yes" ]] && rm -f "${DOWNLOADDIR}"/"${CONFIGSET}"/*.rpm

  elif [[ "${RC}" -eq 0 ]]; then
    logit "INFO: No updates are available to be applied."
    log_last_run
  else
    logit "ERROR: Exit status ${RC} returned by \`${PACKAGE_MANAGER} check-update ${PACKAGEMANAGEROPTIONS[*]}\`. Exiting."
    quit 3
  fi
}
