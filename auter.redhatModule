#!/bin/bash

# This is a script that is intended to only be called by /usr/bin/auter and 
# contains linux distribution specifc code for auter. 


# This is the redhat/fedora/CentOS version of this script

function prepare_updates() {
  if [[ "${PREDOWNLOADUPDATES}" == "yes" ]]; then
    if [[ $(${PACKAGE_MANAGER} --help | grep -c downloadonly) -gt 0 ]]; then
      local RC=$(${PACKAGE_MANAGER} check-update ${PACKAGEMANAGEROPTIONS} &>/dev/null; echo $?)

      # If check-update has an exit code of 100, updates are available.
      if [[ "${RC}" -eq 100 ]]; then
        sleep $(($RANDOM % ${MAXDELAY}))
        if [[ "${ONLYINSTALLFROMPREP}" == "yes" ]]; then
          DOWNLOADOPTION="--downloaddir=${DOWNLOADDIR}/${CONFIGSET}"
          rm -f "${DOWNLOADDIR}"/"${CONFIGSET}"/*.rpm
          # DNF doesn't support downloaddir, so instead we download to the default
          # location and copy out the way
          if [[ "${PACKAGE_MANAGER}" == "dnf" ]]; then
            find /var/cache/dnf -name *.rpm -exec rm -f {} \;
            DOWNLOADOPTION=""
          fi
          DOWNLOADLOGMSG=" to ${DOWNLOADDIR}/${CONFIGSET}"
        fi
        PREPOUTPUT=$(${PACKAGE_MANAGER} ${PACKAGEMANAGEROPTIONS} ${DOWNLOADOPTION} update --downloadonly -y)
        [[ "${PACKAGE_MANAGER}" == "dnf" ]] && find /var/cache/dnf -name *.rpm -exec mv {} ${DOWNLOADDIR}/${CONFIGSET} \;

        logit "INFO: Updates downloaded${DOWNLOADLOGMSG}"
      elif [[ "${RC}" -eq 1 ]]; then
        logit "ERROR: Exit status ${RC} returned by \`${PACKAGE_MANAGER} ${PACKAGEMANAGEROPTIONS} ${DOWNLOADOPTION} update --downloadonly -y\`. Exiting."
      else
        logit "INFO: No updates are available to be downloaded."
      fi
    else
      logit "WARNING: downloadonly option is not available"
    fi
  else
    PREPOUTPUT=$(${PACKAGE_MANAGER} ${PACKAGEMANAGEROPTIONS} check-update)
  fi
  [[ "${PREPOUTPUT}" ]] && echo "${PREPOUTPUT}" > ${DATADIR}/last-prep-${CONFIGSET}
}


function apply_updates() {
  # Set the list of rpms to be installed
  if [[ "${ONLYINSTALLFROMPREP}" == "yes" ]]; then
    RC=0
    if [[ $(ls -1 ${DOWNLOADDIR}/${CONFIGSET}/*.rpm | wc -l) -gt 0 ]]; then
      RPMS="${DOWNLOADDIR}/${CONFIGSET}/*.rpm"
      RC=100
    fi
    # When passing RPMs to dnf/yum, the update verb won't install any that aren't already
    # installed (i.e. dependencies of other packages). Instead we need to use install.
    UPDATEACTION="install"
  else
    local RC=$(${PACKAGE_MANAGER} check-update ${PACKAGEMANAGEROPTIONS} &>/dev/null; echo $?)
    UPDATEACTION="update"
  fi

  # If check-update has an exit code of 100, updates are available.
  if [[ "${RC}" -eq 100 ]]; then
    for SCRIPT in "${PREAPPLYSCRIPTDIR}"/*; do
      run_script "${SCRIPT}" "Pre-Apply"
    done

    sleep $(($RANDOM % ${MAXDELAY}))
    logit "INFO: Applying updates"
    local HISTORY_BEFORE=$(${PACKAGE_MANAGER} history list)

    # We don't want to allow the user to interrupt a yum/dnf transaction or Bad Things Happen.
    trap '' SIGINT SIGTERM
    ${PACKAGE_MANAGER} ${UPDATEACTION} -y ${PACKAGEMANAGEROPTIONS} ${RPMS} &>/dev/null
    ${PACKAGE_MANAGER} history info > ${DATADIR}/last-update-${CONFIGSET}
    default_signal_handling

    local HISTORY_AFTER=$(${PACKAGE_MANAGER} history list)

    if [[ "${HISTORY_BEFORE}" == "${HISTORY_AFTER}" ]]; then
      logit "ERROR: Updates failed. Exiting."
      quit 3
    fi

    local TRANSACTIONID=$(grep "Transaction ID" ${DATADIR}/last-update-${CONFIGSET})
    logit "INFO: Updates complete (${PACKAGE_MANAGER} ${TRANSACTIONID}). You may need to reboot for some updates to take effect"

    for SCRIPT in "${POSTAPPLYSCRIPTDIR}"/*; do
      run_script "${SCRIPT}" "Post-Apply"
    done

    [[ "${AUTOREBOOT}" == "yes" ]] && reboot_server

  elif [[ "${RC}" -eq 0 ]]; then
    logit "INFO: No updates are available to be applied."
    quit 0
  else
    logit "ERROR: Exit status ${RC} returned by \`${PACKAGE_MANAGER} check-update ${PACKAGEMANAGEROPTIONS}\`. Exiting."
    quit 3
  fi
}

[[ ! $1 ]] && exit 1
[[ $1 == "prepare_updates" ]] && prepare_updates
[[ $1 == "apply_updates" ]] && prepare_updates
