#!/bin/bash
#
# Send an email notification with the status of the auter prepare stage.
#
# auter is a yum-cron type package which implements automatic updates on an
# individual server with features such as predownloading packages and reboots.
#
#
# Copyright 2016 Rackspace, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use
# this file except in compliance with the License.  You may obtain a copy of the
# License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed
# under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations under the License.
#
# Mail config file

############
## Variables
############

function main() {
  # Convert stage to lowercase for easier comparison
  # later in the script and split into array using
  # delimiter '-'
  local -r stage="$1"
  #IFS='-' read -ra stage <<< "$1"

  # Override the above defaults in the config file
  local -r _notifyconfig="${SCRIPTDIR}/auter-notify.conf"
  [[ ! -f "$_notifyconfig" ]] && logit "ERROR: auter-notify.conf is missing, skipping $0"
  source "$_notifyconfig" 

  # Declare readonly local variables
  local -r _mail_to="$MAIL_TO"
  local -r _mail_from="$MAIL_FOM"
  # Format MAIL_CC list
  local -r _mail_cc="-c $(sed 's/ / -c /g' <<< $MAIL_CC)"

  # Util variables
  local -r _syslog=$([[ -f /var/log/messages ]] && echo "/var/log/messages" || echo "/var/log/syslog")
  local -r _start_time="$(awk --posix -v today="$(date '+%b %d')" '$0~today && /Running with: \/usr\/bin\/auter --apply/{last=$3;}END{printf("%s",last)}' $syslog)"

  if [[ "$stage" =~ "prep" ]]; then
    local output_file="${DATADIR}/last-prep-output-${CONFIGSET}"
  elif [[ "$stage" =~ "apply" ]]; then
    local output_file="${DATADIR}/last-apply-output-${CONFIGSET}"
  fi

  function logit() {
    # If running on a tty, or the --stdout option is provided, print to screen
    ( tty -s || [[ $STDOUT ]] ) && echo "$1"
    logger -p info -t auter "$1"
  }

  function get_package_list() {
    local package_list="\n$(awk --posix '/={80}/,/Total download size/' $output_file)"
    echo -n "$package_list"
  }
  function get_error_message() {
    local -r error_result="\n\n$(awk '/Error Downloading Packages:/,0' $output_file)"
    echo -n "$error_result"
  }
  function get_stage_result() {
    local -r result="$(grep 'Error Downloading Packages'  &>/dev/null && echo 'FAIL' || echo 'SUCCESS')"
    echo -n "$result"
  }

  [[ ! -x $(which mailx) ]] && logit "ERROR: mailx is not installed, skipping $0 script" && exit 0
  [[ -z "$MAIL_TO" ]] && logit "ERROR: \$MAIL_TO is undefined, skipping $0 script" && exit 0
  [[ "$#" -eq 0 ]] &&  logit "ERROR: auter-notify requires a phase argument, skipping $0 script" && exit 0


  function send_mail() {
    local result="$1"; shift
    local body="$1"

    # Construct the mail subject based on
    # the stage success or failure
    function build_mail_subject() {
      local subject="[Auter] $stage stage for $(hostname)"
      if [[ "$result" == "SUCCESS" ]]; then
        subject+=" was successful"
      else
        subject=" has failed"
      fi
      echo "$subject"
    }

    # Construct the mail body based on
    # the prep success or failure
    function build_mail_body() {
      local body="Greetings,\n\n"
      body+="The auter $stage stage for server $(hostname) "
      body+="$body"
      body+="\n\nRegards,\nAuter."
      echo -e "$body"
    }

    if ! mailx -r "$_mail_from" "$_mail_cc" -s "$subject" "$_mail_to" <<< "$body"; then
      logit "ERROR: Sending $stage email notification failed."
    fi
  }

  function notify_prep() {
    if [[ "$stage" == "pre-prep" ]]; then
      # Build body for post-prep
      # Last prep result, FAIL or SUCCESS

      # If FAIL then we should reword the email accordingly
      if [[ "$prep_result" == "FAIL" ]]; then
        local -r prep_error="\n\n$(awk '/Error Downloading Packages:/,0' )"
      fi

      local body=""
      if [[ $prep_result == "SUCCESS" ]]; then
        body+="completed successfully at $(date '+%T %Z'). The following packages "
        body+="will be installed during the next apply stage.\n"
      else
        body+="has failed with the following error.\n"
      fi
      body+="$(get_package_list ${DATADIR}/last-prep-output-${CONFIGSET})${prep_error}"

      send_mail "$prep_result" "$body"
    fi
  }

  function notify_apply() {
    if [[ "$stage" == "pre-apply" ]]; then
      # Build body for pre-apply
      echo -n "$_start_time"
    elif [[ "$stage" == "post-apply" ]]; then
      # Build body for post-apply
      # Last prep result, FAIL or SUCCESS
      local -r apply_result="$(grep 'Error Downloading Packages' ${DATADIR}/last-apply-output-${CONFIGSET} &>/dev/null && echo 'FAIL' || echo 'SUCCESS')"

      # If FAIL then we should reword the email accordingly
      if [[ "$prep_result" == "FAIL" ]]; then
        local -r apply_error="\n\n$(awk '/Error Downloading Packages:/,0' ${DATADIR}/last-apply-output-${CONFIGSET})"
      fi

      local body=""
      if [[ $prep_result == "SUCCESS" ]]; then
        body+="completed successfully at $(date '+%T %Z'). The following packages "
        body+="will be installed during the next apply stage.\n"
      else
        body+="has failed with the following error.\n"
      fi
      body+="$(get_package_list ${DATADIR}/last-prep-output-${CONFIGSET})${prep_error}"

      send_mail "$prep_result" "$body"
    fi

    send_mail "$prep_result" "$body"
  }

  function notify_reboot() {
    if [[ "$stage" == "pre-reboot" ]]; then
      # Build body for pre-reboot
      echo -n "$_start_time"
    elif [[ "$stage" == "post-reboot" ]]; then
      # Build body for post-reboot
    fi
  }

  case "$stage" in
    *-prep)
      notify_prep "$stage"
      ;;
    *-apply | "post-apply")
      notify_apply "$stage"
      ;;
    *-reboot | "post-reboot")
      notify_reboot "$stage"
      ;;
    *)
      logit "ERROR: Unknown auter stage $stage, it should be one of pre-prep, pre-apply, post-apply, pre-reboot, or post-reboot"
      exit 0
      ;;
  esac


}

main "$@"

# vim: ts=2 sw=2 sts=2 fo+=r
